{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitRepo\\\\AF-Assignment\\\\client\\\\src\\\\components\\\\upload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport Dropzone from 'react-dropzone';\nimport axios from 'axios';\nimport { Form, Row, Col, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileUpload = props => {\n  _s();\n\n  const [file, setFile] = useState(null); // state for storing actual image\n\n  const [previewSrc, setPreviewSrc] = useState(''); // state for storing previewImage\n\n  const [data] = useState({\n    submissionTypes: [\"Marking Scheme\", \"Presentation Templete\", \"Other Information for Students\", \"Other Information for Staff\"]\n  });\n  const [submissionName, SetsubmissionName] = useState('');\n  const [description, SetDescription] = useState('');\n  const [errorMsg, setErrorMsg] = useState('');\n  const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images\n\n  const dropRef = useRef(); // React ref for managing the hover state of droppable area\n\n  const onDrop = files => {\n    const [uploadedFile] = files;\n    setFile(uploadedFile);\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      setPreviewSrc(fileReader.result);\n    };\n\n    fileReader.readAsDataURL(uploadedFile);\n    setIsPreviewAvailable(uploadedFile.name.match(/\\.(jpeg|jpg|png)$/));\n    dropRef.current.style.border = '2px dashed #e9ebeb';\n  };\n\n  const updateBorder = dragState => {\n    if (dragState === 'over') {\n      dropRef.current.style.border = '2px solid #000';\n    } else if (dragState === 'leave') {\n      dropRef.current.style.border = '2px dashed #e9ebeb';\n    }\n  };\n\n  const handleOnSubmit = async event => {\n    event.preventDefault();\n    console.log(file);\n\n    try {\n      //   const subName   = submissionName;\n      //   const sub = subName.submissionName;\n      // if (groupname.trim() !== '' && submissionName.trim() !== '') {\n      if (file) {\n        const formData = new FormData();\n        formData.append(file);\n        formData.append(description);\n        formData.append(submissionName);\n        console.log(formData);\n        setErrorMsg('');\n        await axios.post(\"http://localhost:8070/upload/add\", formData //   headers: {\n        //     'Content-Type': 'multipart/form-data'\n        //   }\n        ); //props.history.push('/');\n      } else {\n        setErrorMsg('Please select a file to add.');\n      }\n    } catch (error) {\n      error.response && setErrorMsg(error.response.data);\n    }\n  };\n\n  const onChangeSubmissionName = e => {\n    e.preventDefault();\n    console.log(e.target.value);\n    SetsubmissionName(e.target.value);\n  };\n\n  const Description = event => {\n    event.preventDefault();\n    console.log(event.target.value);\n    SetDescription(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Admin Document Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        className: \"search-form\",\n        onSubmit: handleOnSubmit,\n        children: [errorMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"errorMsg\",\n          children: errorMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"Submission Type\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \" Submission Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n                \"aria-label\": \"Default select example\",\n                required: true,\n                className: \"form-control\",\n                value: data.submissionName,\n                onChange: onChangeSubmissionName // onChange={(e) => setState({submissionName: e.target.value})}\n                ,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  selected: true,\n                  disabled: true,\n                  children: \"choose submission type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 19\n                }, this), data.submissionTypes.map(function (submission) {\n                  return /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: submission,\n                    children: submission\n                  }, submission, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 111,\n                    columnNumber: 28\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"description\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \" Description \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                name: \"description\",\n                placeholder: \"add a description\",\n                required: true,\n                onChange: event => Description(event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n            onDrop: onDrop,\n            onDragEnter: () => updateBorder('over'),\n            onDragLeave: () => updateBorder('leave'),\n            children: _ref => {\n              let {\n                getRootProps,\n                getInputProps\n              } = _ref;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  backgroundColor: \"skyBlue\",\n                  width: '40%'\n                },\n                ...getRootProps({\n                  className: 'drop-zone'\n                }),\n                ref: dropRef,\n                children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps(),\n                  style: {\n                    height: \"100px\",\n                    backgroundColor: \"skyBlue\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Drag and drop a file OR\", /*#__PURE__*/_jsxDEV(\"button\", {\n                    style: {\n                      color: \"red\",\n                      border: \"none\",\n                      backgroundColor: 'transparent'\n                    },\n                    children: \"click here\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 43\n                  }, this), \"to select a file\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 17\n                }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Selected file:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 21\n                  }, this), \" \", file.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 15\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 11\n          }, this), previewSrc ? isPreviewAvailable ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-preview\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"preview-image\",\n              style: {\n                width: \"200px\",\n                height: \"200px\"\n              },\n              src: previewSrc,\n              alt: \"Preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No preview available for this file\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-message\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Image preview will be shown here after selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FileUpload, \"qOwIz7ZhOZ6Av+BWoM0EQa+PA+I=\");\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"sources":["D:/GitRepo/AF-Assignment/client/src/components/upload.js"],"names":["React","useState","useRef","useEffect","Dropzone","axios","Form","Row","Col","Button","FileUpload","props","file","setFile","previewSrc","setPreviewSrc","data","submissionTypes","submissionName","SetsubmissionName","description","SetDescription","errorMsg","setErrorMsg","isPreviewAvailable","setIsPreviewAvailable","dropRef","onDrop","files","uploadedFile","fileReader","FileReader","onload","result","readAsDataURL","name","match","current","style","border","updateBorder","dragState","handleOnSubmit","event","preventDefault","console","log","formData","FormData","append","post","error","response","onChangeSubmissionName","e","target","value","Description","map","submission","getRootProps","getInputProps","backgroundColor","width","className","height","color"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport Dropzone from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport { Form, Row, Col, Button } from 'react-bootstrap';\r\n\r\nconst FileUpload = (props) => {\r\n  const [file, setFile] = useState(null); // state for storing actual image\r\n  const [previewSrc, setPreviewSrc] = useState(''); // state for storing previewImage\r\n  const [data] = useState({\r\n    submissionTypes: [\"Marking Scheme\", \"Presentation Templete\", \"Other Information for Students\", \"Other Information for Staff\"],\r\n  });\r\n  const [submissionName, SetsubmissionName] = useState('');\r\n  const [description, SetDescription] = useState('');\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n  const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images\r\n  const dropRef = useRef(); // React ref for managing the hover state of droppable area\r\n\r\n  const onDrop = (files) => {\r\n    const [uploadedFile] = files;\r\n    setFile(uploadedFile);\r\n\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewSrc(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(uploadedFile);\r\n    setIsPreviewAvailable(uploadedFile.name.match(/\\.(jpeg|jpg|png)$/));\r\n    dropRef.current.style.border = '2px dashed #e9ebeb';\r\n  };\r\n\r\n  const updateBorder = (dragState) => {\r\n    if (dragState === 'over') {\r\n      dropRef.current.style.border = '2px solid #000';\r\n    } else if (dragState === 'leave') {\r\n      dropRef.current.style.border = '2px dashed #e9ebeb';\r\n    }\r\n  };\r\n\r\n  const handleOnSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    console.log(file)\r\n\r\n    try {\r\n    //   const subName   = submissionName;\r\n    //   const sub = subName.submissionName;\r\n      // if (groupname.trim() !== '' && submissionName.trim() !== '') {\r\n      if (file) {\r\n        const formData = new FormData();\r\n        formData.append(file);\r\n        formData.append(description);\r\n        formData.append(submissionName);\r\n\r\n        console.log(formData);\r\n\r\n        setErrorMsg('');\r\n        \r\n        await axios.post(\"http://localhost:8070/upload/add\", formData, \r\n        //   headers: {\r\n        //     'Content-Type': 'multipart/form-data'\r\n        //   }\r\n        );\r\n        //props.history.push('/');\r\n      } else {\r\n        setErrorMsg('Please select a file to add.');\r\n      }\r\n    \r\n    } catch (error) {\r\n      error.response && setErrorMsg(error.response.data);\r\n    }\r\n  };\r\n\r\n  const onChangeSubmissionName = (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(e.target.value)\r\n\r\n    SetsubmissionName(e.target.value);\r\n  }\r\n\r\n  const Description = (event) => {\r\n      event.preventDefault();\r\n\r\n      console.log(event.target.value);\r\n\r\n      SetDescription(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n    <React.Fragment>\r\n    <br/>\r\n      <h3>Admin Document Upload</h3>\r\n      <br />\r\n      <Form className=\"search-form\" onSubmit={handleOnSubmit}>\r\n      {errorMsg && <p className=\"errorMsg\">{errorMsg}</p>}\r\n        <Row>\r\n          <Col>\r\n            <Form.Group controlId=\"Submission Type\">\r\n              <Form.Label> Submission Type</Form.Label>\r\n              <Form.Select aria-label='Default select example'\r\n                required\r\n                className=\"form-control\"\r\n                value={data.submissionName}\r\n                onChange={onChangeSubmissionName}\r\n              // onChange={(e) => setState({submissionName: e.target.value})}\r\n              >\r\n                  <option selected disabled>choose submission type</option>\r\n                {\r\n                  data.submissionTypes.map(function (submission) {\r\n                    return <option\r\n                      key={submission}\r\n                      value={submission}>{submission}\r\n                    </option>;\r\n                  })\r\n                }\r\n              </Form.Select>\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <br/>\r\n        <Row>\r\n          <Col>\r\n            <Form.Group controlId=\"description\">\r\n              <Form.Label> Description </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"description\"\r\n                placeholder='add a description'\r\n                required\r\n                onChange={(event) => Description(event)}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <div className=\"upload-section\">\r\n          <Dropzone\r\n            onDrop={onDrop}\r\n            onDragEnter={() => updateBorder('over')}\r\n            onDragLeave={() => updateBorder('leave')}\r\n          >\r\n            {({ getRootProps, getInputProps }) => (\r\n              <div style={{ backgroundColor: \"skyBlue\", width: '40%' }}{...getRootProps({ className: 'drop-zone' })} ref={dropRef}>\r\n                <input {...getInputProps()} style={{ height: \"100px\", backgroundColor: \"skyBlue\" }} />\r\n                <p>Drag and drop a file OR<button style={{ color: \"red\", border: \"none\", backgroundColor: 'transparent' }}>click here</button>to select a file</p>\r\n                {file && (\r\n                  <div>\r\n                    <strong>Selected file:</strong> {file.name}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </Dropzone>\r\n          {previewSrc ? (\r\n            isPreviewAvailable ? (\r\n              <div className=\"image-preview\">\r\n                <img className=\"preview-image\" style={{ width: \"200px\", height: \"200px\" }} src={previewSrc} alt=\"Preview\" />\r\n              </div>\r\n            ) : (\r\n              <div className=\"preview-message\">\r\n                <br />\r\n                <p>No preview available for this file</p>\r\n              </div>\r\n            )\r\n          ) : (\r\n            <div className=\"preview-message\">\r\n              <p>Image preview will be shown here after selection</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <br />\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </React.Fragment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;"]},"metadata":{},"sourceType":"module"}